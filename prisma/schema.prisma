generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int        @id @default(autoincrement()) // 1부터 순차적으로 커진다.
  username   String     @unique
  email      String?    @unique // 전화번호 또는 소셜 로그인으로 로그인할 수 있기에 필수값 x
  password   String? // 전화번호 또는 소셜 로그인으로 로그인할 수 있기에 필수값 x
  phone      String?    @unique // 이메일 또는 소셜 로그인으로 로그인할 수 있기에 필수값 x
  github_id  String?    @unique // 깃허브로 로그인 할 수도 있기 때문에 필수값 x
  avatar     String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  tokens     SMSToken[]
  products   Product[]
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  chat_rooms ChatRoom[]
  messages   Message[]
}

model SMSToken {
  id         Int      @id @default(autoincrement()) // 1부터 순차적으로 커진다.
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // userId의 경로를 알려주는 줄임
  userId     Int
}

// onDelete: Cascade | Restrict | SetNull
// Cascade : 부모 노드 삭제하면 현재 노드 삭제
// Restrict : 현재 노드를 삭제하지 않으면 부모 노드는 삭제 불가
// SetNull : 부모 노드가 삭제되면, 현재 노드에 부모를 가리키는 속성 값은 NULL (이 때, Type은 ? (Optional) 해야한다.)

model Product {
  id          Int    @id @default(autoincrement()) // 1부터 순차적으로 커진다.
  title       String
  price       Float // 소수점까지 표시됌 ex) 31.4
  photo       String
  description String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // userId의 경로를 알려주는 줄임
  userId     Int
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  views       Int     @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  likes    Like[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int

  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id    String @id @default(cuid())
  users User[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
}

model Message {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
}
